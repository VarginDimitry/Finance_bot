import logging
import config
import asyncio
from datetime import datetime

# the base aiogram import
from aiogram import Bot, Dispatcher, executor, types
# the import for keyboard
import my_keyboards
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

from config import *
from bank import Banker
from scripts import *

logging.basicConfig(level=logging.INFO)

# INIT BOT
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# INIT DATA BASE
db = Banker('db.db')


# !!! COMMANDS !!!
@dp.message_handler(commands=['start'])
async def startChatting(message: types.Message):
    if message.from_user.id in db.userIdList(1):
        await message.answer('–í—ã —É–∂–µ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏!')
    else:
        if message.from_user.id in db.userIdList(0):
            db.setStatus(message.from_user.id, True)
            await message.answer('–í—ã —Å–Ω–æ–≤–∞ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏!‚úÖ')
        else:
            db.addUser(message.from_user.id)
            await message.answer('–í—ã –Ω–∞—á–∞–ª–∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏! ‚úÖ\n' +
                                 '–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å:\n' + instruction)


@dp.message_handler(commands=['stop'])
async def stopChatting(message: types.Message):
    await message.answer('–í—ã –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏üòñ\n–¢–µ–ø–µ—Ä—å –¥–∞–∂–µ –Ω–∞ –ø—Ä–æ–µ–∑–¥ –Ω–µ —Ö–≤–∞—Ç–∏—Ç...')
    db.setStatus(message.from_user.id, False)

@dp.message_handler(commands=['report'])
async def monthReport(message: types.Message):
    user = db.getUserById(message.from_user.id)
    transfers = db.monthlyReport(message.from_user.id)
    spent_money = sum(x[2] for x in transfers if x[2] < 0)

    top_category = db.topCategory(message.from_user.id)
    category_list = ''
    for i in range(len(top_category)):
        if top_category[0][i] < 0:
            category_list += f'{i+1}) {top_category[1][i]} - {abs(top_category[0][i])}\n'
    answer = f'‚úÖ –í–∞—à –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü ‚úÖ\n\n' \
             f'üí≥ –î–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—É:\t{user[3]}\n' \
             f'üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –¥–µ–Ω–µ–≥ –∑–∞ {months[datetime.now().month - 1]}:{abs(spent_money)}\n' \
             f'üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{category_list}'
    await message.answer(answer)


# !!! TRANSFERS !!!
@dp.message_handler()
async def writeTransfer(message: types.Message):
    if int(message.from_user.id) not in db.userIdList(1):
        await message.answer('–Ø —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.')

    # Note about value of transfer
    elif isDigit(str(message.text)):
        db.addTransfer(message.from_user.id, float(message.text), datetime.now())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=my_keyboards.category_keyboard)

    # Message about a transfer category
    elif db.getLastTransfer(message.from_user.id)[4] == '–Ω–µ–í—ã–±—Ä–∞–Ω–æ' and str(message.text) in my_keyboards.category_buttons:
        category = str(message.text)
        transfer = db.getLastTransfer(message.from_user.id)
        db.updateTransfer(transfer[0], transfer[1], transfer[2], category, transfer[3])
        await message.answer('–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞!', reply_markup=ReplyKeyboardRemove())

    # Wrong message
    else:
        db.deleteEmptyTransfers(message.from_user.id)
        await message.answer('–Ø –Ω–µ –ø–æ–Ω—è–ª —Ç–µ–±—è –∏–ª–∏ —Ç—ã —Å–¥–µ–ª–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏üòñ\n'
                             '–Ø –≤—Å–µ–≥–æ –ª–∏—à—å —Ä–æ–±–æ—Ç ü§ñ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π —Å–ª–µ–¥—É—é—â–∏–º –ø—É–Ω–∫—Ç–∞–º:\n' + instruction)



'''
# echo message
@dp.message_handler()
async def echo(message: types.Message):
    await message.answer(message.text)
'''

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
